name: CD Release Process

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger when tags matching the pattern

jobs:
  update-version-number:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Extract version from tag
        id: extract_version
        run: |
          # Get the tag name (format: v1.0.0)
          TAG_NAME=${GITHUB_REF#refs/tags/}
          # Remove the 'v' prefix if present
          VERSION=${TAG_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Update Version Number
        run: |
          git config pull.rebase false  # Configure to use merge strategy
          git fetch origin main
          git merge origin/main
          OLD_VERSION=$(grep ^version backend/pyproject.toml | cut -d '"' -f 2)
          OLD_VERSION="\"$OLD_VERSION\""
          NEW_VERSION="\"${{ steps.extract_version.outputs.VERSION }}\""
          sed -i "s+version = $OLD_VERSION+version = $NEW_VERSION+g" backend/pyproject.toml
          
      - name: Commit Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -a -m "chore(pyproject): Update version number to ${{ steps.extract_version.outputs.VERSION }}"
          git push origin HEAD:main

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          
  build-and-upload:
    name: Build and Upload Docker Image
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and export Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: resty:${{ steps.get_version.outputs.VERSION }}
          outputs: type=docker,dest=/tmp/resty-image.tar
          
      - name: Compress Docker image
        run: |
          mkdir -p ./artifacts
          gzip -c /tmp/resty-image.tar > ./artifacts/resty-${{ steps.get_version.outputs.VERSION }}.tar.gz
      
      - name: Upload Docker image to release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/resty-${{ steps.get_version.outputs.VERSION }}.tar.gz
          tag_name: ${{ steps.get_version.outputs.VERSION }}